/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * CyberLink FaceMe (R) SDK
 * Copyright (C) 2018 CyberLink Corp. All rights reserved.
 * https://www.cyberlink.com
 */
package com.cyberlink.facemedemo.camera;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ImageFormat;
import android.graphics.Rect;
import android.graphics.SurfaceTexture;
import android.graphics.YuvImage;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.TotalCaptureResult;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.os.Handler;
import android.os.HandlerThread;
import android.util.Log;
import android.util.Size;
import android.view.Surface;

import androidx.annotation.NonNull;

import com.cyberlink.facemedemo.extension.R;
import com.cyberlink.facemedemo.ui.AutoFitTextureView;
import com.cyberlink.facemedemo.ui.CLToast;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

class CameraV21 extends BaseCameraController {
    private static final String TAG = "CamCtrl.V21";

    /**
     * A {@link Handler} for camera preview frame callback.
     */
    private final Handler mPreviewHandler;

    /**
     * A {@link Handler} for {@link ImageReader} to callback available image.
     */
    private final Handler mImageHandler;

    /**
     * {@link CaptureRequest.Builder} for the camera preview
     */
    private CaptureRequest.Builder mPreviewRequestBuilder;

    /**
     * {@link CaptureRequest} generated by {@link #mPreviewRequestBuilder}
     */
    private CaptureRequest mPreviewRequest;

    /**
     * A {@link Semaphore} to prevent the app from exiting before closing the camera.
     */
    private final Semaphore mCameraOpenCloseLock = new Semaphore(1);

    /**
     * A {@link CameraCaptureSession } for camera preview.
     */
    private CameraCaptureSession mPreviewSession;

    /**
     * A reference to the opened {@link CameraDevice}.
     */
    private CameraDevice mCameraDevice;

    /**
     * An {@link ImageReader} that handles image of each frame.
     */
    private ImageReader mImageReader;

    /**
     * An SurfaceTexture for extract Bitmap from OpenGL.
     */
    private BitmapEgl14 bitmapEgl14;

    /**
     * An RenderScript version reader to convert YUV to RGB and output as Bitmap.
     */
    private RenderScriptReader rsReader;

    /**
     * This a callback object for the {@link ImageReader}. "onImageAvailable" will be called when a
     * still image is ready to be saved.
     */
    private final ImageReader.OnImageAvailableListener mOnImageAvailableListener = new ImageReader.OnImageAvailableListener() {

        @Override
        public void onImageAvailable(ImageReader imageReader) {
            statListener.onImageCaptured();

            cameraCallback.checkTask(new CheckCallback() {
                @Override
                public void acquired() {
                    mImageHandler.post(() -> {
                        long start = System.currentTimeMillis();
                        Bitmap bitmap;
                        // TODO: Check and skip if there is a task running to create Bitmap.
                        Image image = imageReader.acquireNextImage();
                        if (ImageFormat.JPEG == image.getFormat()) {
                            bitmap = jpegImageToBitmap(image);
                        } else if (ImageFormat.YUV_420_888 == image.getFormat()) {
                            bitmap = yuvImageToBitmap(image); // FIXME: Sony Z5P is ok but OPPO A75 is incorrect.
                        } else {
                            bitmap = null;
                        }
                        image.close();

                        statListener.onBitmapCreated(System.currentTimeMillis() - start);
                        if (bitmap != null) cameraCallback.onBitmap(bitmap);
                    });
                }

                @Override
                public void rejected() {}
            });
        }

        // Only work when ImageFormat.JPEG
        private Bitmap jpegImageToBitmap(Image image) {
            ByteBuffer buffer = image.getPlanes()[0].getBuffer();
            int bufferSize = buffer.remaining();
            byte[] bytes = new byte[bufferSize];
            buffer.get(bytes, 0, bufferSize);
            return BitmapFactory.decodeByteArray(bytes, 0, bufferSize);
        }

        private Bitmap yuvImageToBitmap(Image image) {
            byte[] nv21 = convertYUV420888ToNV21(image);

            YuvImage yuvImage = new YuvImage(nv21, ImageFormat.NV21, image.getWidth(), image.getHeight(), null);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            yuvImage.compressToJpeg(new Rect(0, 0, image.getWidth(), image.getHeight()), 100, baos);

            byte[] data = baos.toByteArray();
            try { baos.close(); } catch (IOException ignored) {}
            return BitmapFactory.decodeByteArray(data, 0, data.length);
        }

        private byte[] convertYUV420888ToNV21(Image imgYUV420) {
            // Converting YUV_420_888 data to YUV_420_SP (NV21).
            byte[] data;
            ByteBuffer buffer0 = imgYUV420.getPlanes()[0].getBuffer();
            ByteBuffer buffer2 = imgYUV420.getPlanes()[2].getBuffer();
            int buffer0_size = buffer0.remaining();
            int buffer2_size = buffer2.remaining();
            data = new byte[buffer0_size + buffer2_size];
            buffer0.get(data, 0, buffer0_size);
            buffer2.get(data, buffer0_size, buffer2_size);
            return data;
        }
    };

    /**
     * {@link CameraDevice.StateCallback} is called when {@link CameraDevice} changes its state.
     */
    private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {

        @Override
        public void onOpened(@NonNull CameraDevice cameraDevice) {
            Log.d(TAG, " > camera opened");
            // This method is called when the camera is opened.  We start camera preview here.
            mCameraDevice = cameraDevice;
            startPreview();
            mCameraOpenCloseLock.release();
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice cameraDevice) {
            Log.d(TAG, " > camera disconnected");
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
        }

        @Override
        public void onError(@NonNull CameraDevice cameraDevice, int error) {
            logE("Camera error: " + error);
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
        }
    };

    private final CameraCaptureSession.CaptureCallback mCaptureCallback = new CameraCaptureSession.CaptureCallback() {
        @Override
        public void onCaptureCompleted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, @NonNull TotalCaptureResult result) {
            statListener.onFrameCaptured();
            if (bitmapEgl14 != null) {
                bitmapEgl14.bitmapHandler.post(() -> {
                    try {
                        bitmapEgl14.awaitNewImage();
                        bitmapEgl14.drawImage(true);
                        statListener.onImageCaptured();

                        long start = System.currentTimeMillis();
                        Bitmap bitmap = bitmapEgl14.bitmap(); // FIXME: This Bitmap is wrong.
                        if (bitmap != null) statListener.onBitmapCreated(System.currentTimeMillis() - start);
                    } catch (Exception e) {
                        Log.e(TAG, "Cannot extract Bitmap", e);
                    }
                });
            }
        }
    };

    CameraV21(Activity activity, AutoFitTextureView textureView, Callback callback, StatListener listener) {
        super(activity, textureView, callback, listener);

        HandlerThread thread;
        thread = new HandlerThread("CamCtrl.Preview");
        thread.start();
        mPreviewHandler = new Handler(thread.getLooper());

        thread = new HandlerThread("CamCtrl.Image");
        thread.start();
        mImageHandler = new Handler(thread.getLooper());

    }

    @Override
    public int getUiLogicalCameraNum() {
        Integer num = customHandler.getUiLogicalCameraNum();
        if (num != null) return num;

        // TODO:
        return 2;
    }

    @SuppressLint("MissingPermission")
    @Override
    void startCamera(boolean nextCameraId) {
        super.startCamera(nextCameraId);

        if (!isTextureAvailable.get() || !mTextureView.isAvailable()) {
            Log.w(TAG, " > texture is unavailable yet");
            return;
        }
        if (noCameraPermission()) {
            CLToast.show(appContext, R.string.ext_permission_fail, "Camera");
            return;
        }

        CameraManager manager = (CameraManager) appContext.getSystemService(Context.CAMERA_SERVICE);
        if (manager == null) {
            Log.w(TAG, " > CameraManager is unavailable");
            return;
        }

        try {
            Log.v(TAG, " > tryAcquire");
            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
                throw new RuntimeException("Time out waiting to lock camera opening.");
            }
            String cameraId = getCameraId(manager);

            // Choose the sizes for camera preview
            CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);
            StreamConfigurationMap map = characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
            if (map == null) {
                throw new RuntimeException("Cannot get available preview/video sizes");
            }
            Size previewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class),
                    preferWidth, preferHeight, new Size(preferWidth, preferHeight));
            previewWidth = previewSize.getWidth();
            previewHeight = previewSize.getHeight();

//            mImageReader = ImageReader.newInstance(previewWidth, previewHeight, ImageFormat.YUV_420_888, 2);
//            mImageReader.setOnImageAvailableListener(mOnImageAvailableListener, mImageHandler);

//            bitmapEgl14 = new BitmapEgl14(previewWidth, previewHeight);

//            rsReader = new RenderScriptReader(appContext, previewWidth, previewHeight);
//            ImageReader imageReader = ImageReader.newInstance(previewWidth, previewHeight,
//                    PixelFormat.RGBA_8888, 1);
//            rsReader.setOutputSurface(imageReader.getSurface());

            adjustTextureViewAspectRatio();
            configureTransform(); // startCamera
            manager.openCamera(cameraId, mStateCallback, null);
        } catch (CameraAccessException e) {
            logE(e);
        } catch (NullPointerException e) {
            // Currently an NPE is thrown when the Camera2API is used but not supported on the
            // device this code runs.
            logE(e);
        } catch (InterruptedException e) {
            throw new RuntimeException("Interrupted while trying to lock camera opening.");
        }
    }

    @Override
    public List<Size> getResolutions() {
        // TODO:
        return null;
    }

    private String getCameraId(CameraManager manager) throws CameraAccessException {
        for (String cameraId : manager.getCameraIdList()) {
            CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);
            Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);
            if (facing == null) continue;

            // Only support back or front. External is not supported currently.
            if ((isCameraFacingBack && facing == CameraCharacteristics.LENS_FACING_BACK) ||
                    (!isCameraFacingBack && facing == CameraCharacteristics.LENS_FACING_FRONT))
                return cameraId;
        }

        return manager.getCameraIdList()[0];
    }

    @Override
    void stopCamera() {
        Log.i(TAG, "stopCamera");

        try {
            mCameraOpenCloseLock.acquire();
            closePreviewSession(); // stopCamera
            if (null != mCameraDevice) {
                mCameraDevice.close();
                mCameraDevice = null;
            }
            if (null != mImageReader) {
                mImageReader.close();
                mImageReader = null;
            }
            if (null != bitmapEgl14) {
                bitmapEgl14.release();
                bitmapEgl14 = null;
            }
        } catch (InterruptedException e) {
            throw new RuntimeException("Interrupted while trying to lock camera closing.");
        } finally {
            mCameraOpenCloseLock.release();
        }
    }

    @Override
    public void release() {
        super.release();

        mPreviewHandler.getLooper().quitSafely();
    }

    /**
     * Creates a new {@link CameraCaptureSession} for camera preview.
     */
    private void startPreview() {
        if (mCameraDevice == null || !mTextureView.isAvailable()) return;

        Log.d(TAG, "startPreview");
        try {
            closePreviewSession(); // startPreview

            SurfaceTexture texture = mTextureView.getSurfaceTexture();
            assert texture != null;
            texture.setDefaultBufferSize(previewWidth, previewHeight);

            // We set up a CaptureRequest.Builder with the output Surface.
            mPreviewRequestBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);

            ArrayList<Surface> outputSurfaces = new ArrayList<>();
            Surface surface;
            // Preview in TextureView
            surface = new Surface(texture);
            outputSurfaces.add(surface);
            mPreviewRequestBuilder.addTarget(surface);
            // Preview in ImageReader
            if (mImageReader != null) {
                surface = mImageReader.getSurface();
                outputSurfaces.add(surface);
                mPreviewRequestBuilder.addTarget(surface);
            }
            // Preview in EGL14.
            if (bitmapEgl14 != null) {
                surface = bitmapEgl14.getSurface();
                outputSurfaces.add(surface);
                mPreviewRequestBuilder.addTarget(surface);
            }
            // Preview in RenderScript
            if (rsReader != null) {
                surface = rsReader.getSurface();
                outputSurfaces.add(surface);
                mPreviewRequestBuilder.addTarget(surface);
            }

            // Here, we create a CameraCaptureSession for camera preview.
            mCameraDevice.createCaptureSession(outputSurfaces, new CameraCaptureSession.StateCallback() {
                @Override
                public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
                    // The camera is already closed
                    if (null == mCameraDevice) return;

                    Log.v(TAG, " > preview configured");
                    // When the session is ready, we start displaying the preview.
                    mPreviewSession = cameraCaptureSession;
                    try {
                        // Overall mode of 3A (auto-exposure, auto-white-balance, auto-focus) control routines.
                        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);

                        // Finally, we start displaying the camera preview.
                        mPreviewRequest = mPreviewRequestBuilder.build();
                        mPreviewSession.setRepeatingRequest(mPreviewRequest, mCaptureCallback, mPreviewHandler);
                    } catch (CameraAccessException e) {
                        logE(e);
                    }
                }

                @Override
                public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {
                    logE("Session onConfigureFailed");
                }
            }, null);
        } catch (CameraAccessException e) {
            logE(e);
        }
    }

    private void closePreviewSession() {
        if (mPreviewSession != null) {
            mPreviewSession.close();
            mPreviewSession = null;
        }
    }
}
